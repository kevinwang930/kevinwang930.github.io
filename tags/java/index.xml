<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Kevin wang's blog</title><link>https://kevinwang930.github.io/tags/java/</link><description>Recent content in Java on Kevin wang's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Wed, 27 Mar 2024 14:39:29 +0800</lastBuildDate><atom:link href="https://kevinwang930.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Spring微服务架构与实现</title><link>https://kevinwang930.github.io/post/java/spring/mvc/</link><pubDate>Wed, 27 Mar 2024 14:39:29 +0800</pubDate><guid>https://kevinwang930.github.io/post/java/spring/mvc/</guid><description>&lt;p>本文记录spring微服务架构与实现细节&lt;/p></description></item><item><title>Concurrency utilities in Java</title><link>https://kevinwang930.github.io/post/java/concurrency/concurrency_utils/</link><pubDate>Sun, 25 Feb 2024 01:57:48 +0800</pubDate><guid>https://kevinwang930.github.io/post/java/concurrency/concurrency_utils/</guid><description>&lt;p>本文记录jdk提供的并发编程基础模块，包含：1. 线程池，2. 异步执行框架，3.线程安全集合，4. 同步器&lt;/p></description></item><item><title>java collections internals</title><link>https://kevinwang930.github.io/post/java/java-collections/</link><pubDate>Sat, 24 Feb 2024 19:16:25 +0800</pubDate><guid>https://kevinwang930.github.io/post/java/java-collections/</guid><description>1. Collections A collection is an object that represents a group of objects (such as the classic Vector class). A collections framework is a unified architecture for representing and manipulating collections, enabling collections to be manipulated independently of implementation details.
1.1 Collection interfaces java.util.collection java.util.Set java.util.SortedSet java.util.NavigableSet java.util.Queue java.util.concurrent.BlockingQueue java.util.concurrent.TransferQueue java.util.Deque java.util.concurrent.BlockingDeque java.util.map and offspring java.util.SortedMap java.util.NavigableMap java.util.concurrent.ConcurrentMap java.util.concurrent.ConcurrentNavigableMap title:collection interface Collection&amp;lt;E&amp;gt; { int size() boolean isEmpty() contains() Iterator&amp;lt;E&amp;gt; iterator() T[] toArray(T[] a) boolean add(E e) boolean remove(Object o) default boolean removeIf(Predicate&amp;lt;?</description></item><item><title>Java Nio</title><link>https://kevinwang930.github.io/post/java/java-nio/</link><pubDate>Sat, 24 Feb 2024 16:11:41 +0800</pubDate><guid>https://kevinwang930.github.io/post/java/java-nio/</guid><description>Java NIO 1. stream api package io { class InputStream { read(byte[]) mark(int) close() reset() skip() } class OutputStream() { write(byte[]) flush() close() } } package nio() { interface Channel { close() isOpen() } abstract class FileChannel { open(Path) read(ByteBuffer) write(ByteBuffer) lock() close() } Channel o-- FileChannel } netty event loop i/o processor custom task channel wrapper of socket
channel pipeline channel handler</description></item></channel></rss>