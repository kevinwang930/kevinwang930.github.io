<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Jvm on Kevin wang's blog</title><link>https://kevinwang930.github.io/categories/jvm/</link><description>Recent content in Jvm on Kevin wang's blog</description><generator>Hugo</generator><language>en-us</language><lastBuildDate>Mon, 12 Aug 2024 15:49:03 +0800</lastBuildDate><atom:link href="https://kevinwang930.github.io/categories/jvm/index.xml" rel="self" type="application/rss+xml"/><item><title>JVM ByteCode Interpreter</title><link>https://kevinwang930.github.io/post/java/jvm/interpreter/</link><pubDate>Mon, 12 Aug 2024 15:49:03 +0800</pubDate><guid>https://kevinwang930.github.io/post/java/jvm/interpreter/</guid><description>&lt;p>This article describes JVM ByteCode Interpreter&lt;/p></description></item><item><title>Java native interface</title><link>https://kevinwang930.github.io/post/java/jvm/jni/</link><pubDate>Sun, 11 Aug 2024 15:58:33 +0800</pubDate><guid>https://kevinwang930.github.io/post/java/jvm/jni/</guid><description>&lt;p>Java native Interface(JNI) is a native programming interface that allows java code that runs inside a Java Virtual Machine(VM) to interoperate with applications and libraries written in other programming languages. such as C, C++ , an assembly.&lt;/p>
&lt;h1 id="jni-load">JNI load&lt;/h1>
&lt;h1 id="bytecode">bytecode&lt;/h1>
&lt;h1 id="example">example&lt;/h1>
&lt;h2 id="jni-header">JNI header&lt;/h2>
&lt;p>&lt;code>javac&lt;/code> can be used to compile java class, use &lt;code>-h&lt;/code> to generate JNI header.&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#34;$JAVA_HOME&amp;#34;/bin/javac -h c -d target Simple.java
&lt;/code>&lt;/pre>&lt;p>A example Simple.java&lt;/p>
&lt;pre tabindex="0">&lt;code>package kevin.project.jni;


public class Simple {

 static {
 System.loadLibrary(&amp;#34;simple&amp;#34;);
 }


 static native int plus(int a, int b);


 public static void main(String[] args) {
 System.out.println(&amp;#34;start main&amp;#34;);
 System.out.println(plus(1, 2));
 }
}
&lt;/code>&lt;/pre>&lt;p>Generated Header&lt;/p>
&lt;pre tabindex="0">&lt;code>/* DO NOT EDIT THIS FILE - it is machine generated */
#include &amp;lt;jni.h&amp;gt;
/* Header for class kevin_project_jni_Simple */

#ifndef _Included_kevin_project_jni_Simple
#define _Included_kevin_project_jni_Simple
#ifdef __cplusplus
extern &amp;#34;C&amp;#34; {
#endif
/*
 * Class: kevin_project_jni_Simple
 * Method: plus
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_kevin_project_jni_Simple_plus
 (JNIEnv *, jclass, jint, jint);

#ifdef __cplusplus
}
#endif
#endif
&lt;/code>&lt;/pre>&lt;p>Cpp implementation&lt;/p>
&lt;pre tabindex="0">&lt;code>/* DO NOT EDIT THIS FILE - it is machine generated */
#include &amp;lt;jni.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
/* Header for class kevin_project_jni_Simple */
#include &amp;#34;kevin_project_jni_Simple.h&amp;#34;
/*
 * Class: kevin_project_jni_Simple
 * Method: plus
 * Signature: (II)I
 */
JNIEXPORT jint JNICALL Java_kevin_project_jni_Simple_plus
 (JNIEnv *env, jclass obj, jint a, jint b) {
 printf (&amp;#34;inside c code\n&amp;#34;);
 return a + b;
}
&lt;/code>&lt;/pre>&lt;h2 id="jni-shared-library">JNI Shared library&lt;/h2>
&lt;p>native C++ code can be compiled to shared library, and loaded into jvm dynamically.
When compile JNI shared library, JNI headers needs to be included.&lt;/p>
&lt;pre tabindex="0">&lt;code>cc -g -shared -fpic -I${JAVA_HOME}/include -I${JAVA_HOME}/include/darwin c/kevin_project_jni_Simple.c -o lib/libSimple.dylib
&lt;/code>&lt;/pre>&lt;h2 id="load-jni-shared-library">load JNI shared library&lt;/h2>
&lt;p>when start jvm, specify &lt;code>library.path&lt;/code> to the generated shared library&lt;/p>
&lt;pre tabindex="0">&lt;code>&amp;#34;$JAVA_HOME&amp;#34;/bin/java -Djava.library.path=&amp;#34;$LD_LIBRARY_PATH&amp;#34;:./lib -cp target kevin.project.jni.Simple
&lt;/code>&lt;/pre>&lt;h1 id="reference">Reference&lt;/h1>
&lt;p>&lt;a href="https://github.com/mkowsiak/jnicookbook">JNICookbook&lt;/a>&lt;/p></description></item><item><title>JVM Thread internals</title><link>https://kevinwang930.github.io/post/java/jvm/thread/</link><pubDate>Wed, 07 Aug 2024 12:59:29 +0800</pubDate><guid>https://kevinwang930.github.io/post/java/jvm/thread/</guid><description>&lt;p>本文记录jvm线程内部实现&lt;/p></description></item><item><title>JVM object internals</title><link>https://kevinwang930.github.io/post/java/jvm/object/</link><pubDate>Mon, 22 Apr 2024 18:11:29 +0800</pubDate><guid>https://kevinwang930.github.io/post/java/jvm/object/</guid><description>&lt;p>本文记录jvm 对象内部实现&lt;/p></description></item><item><title>JVM startup</title><link>https://kevinwang930.github.io/post/java/jvm/startup/</link><pubDate>Wed, 20 Mar 2024 00:46:56 +0800</pubDate><guid>https://kevinwang930.github.io/post/java/jvm/startup/</guid><description>&lt;p>本文记录jvm启动流程&lt;/p></description></item></channel></rss>