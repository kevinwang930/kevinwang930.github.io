<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Kevin wang's blog</title><link>https://kevinwang930.github.io/</link><description>Recent content on Kevin wang's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 25 Feb 2024 01:57:48 +0800</lastBuildDate><atom:link href="https://kevinwang930.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Concurrency in Java</title><link>https://kevinwang930.github.io/post/java-concurrency-lock/</link><pubDate>Sun, 25 Feb 2024 01:57:48 +0800</pubDate><guid>https://kevinwang930.github.io/post/java-concurrency-lock/</guid><description>&lt;h1 id="concurrency-utilities-in-java">Concurrency Utilities in Java&lt;/h1>
&lt;p>The concurrency utilities packages provide a powerful, extensible framework of high-performance threading utilities such as thread pools and blocking queues. This package frees the programmer from the need to craft these utilities by hand, in much the same manner the collections framework did for data structures. Additionally, these packages provide low-level primitives for advanced concurrent programming.&lt;/p></description></item><item><title>java数据结构</title><link>https://kevinwang930.github.io/post/java-datastructure/</link><pubDate>Sat, 24 Feb 2024 19:16:25 +0800</pubDate><guid>https://kevinwang930.github.io/post/java-datastructure/</guid><description>1. CollectionsFramework concept A collection is an object that represents a group of objects (such as the classic Vector class). A collections framework is a unified architecture for representing and manipulating collections, enabling collections to be manipulated independently of implementation details.
1.1 Collection interfaces java.util.collection java.util.Set java.util.SortedSet java.util.NavigableSet java.util.Queue java.util.concurrent.BlockingQueue java.util.concurrent.TransferQueue java.util.Deque java.util.concurrent.BlockingDeque java.util.map and offspring java.util.SortedMap java.util.NavigableMap java.util.concurrent.ConcurrentMap java.util.concurrent.ConcurrentNavigableMap 1.2 Collection implementations Interface Hash Table Resizable Balanced Tree Linked List Hash Table + Linked List List ArrayList LinkedList Deque ArrayDeque LinkedList Map HashMap TreeMap LinkedHashMap ArrayList</description></item><item><title>Java Nio</title><link>https://kevinwang930.github.io/post/java-nio/</link><pubDate>Sat, 24 Feb 2024 16:11:41 +0800</pubDate><guid>https://kevinwang930.github.io/post/java-nio/</guid><description>Java NIO 1. stream api package io { class InputStream { read(byte[]) mark(int) close() reset() skip() } class OutputStream() { write(byte[]) flush() close() } } package nio() { interface Channel { close() isOpen() } abstract class FileChannel { open(Path) read(ByteBuffer) write(ByteBuffer) lock() close() } Channel o-- FileChannel } netty event loop i/o processor custom task channel wrapper of socket
channel pipeline channel handler</description></item><item><title>Spring boot 启动流程</title><link>https://kevinwang930.github.io/post/my-first-post/</link><pubDate>Tue, 09 Jan 2024 23:29:20 +0800</pubDate><guid>https://kevinwang930.github.io/post/my-first-post/</guid><description>1. 概述 class SpringApplication { WebApplicationType webApplicationType List&amp;lt;ApplicationContextInitializer&amp;lt;?&amp;gt;&amp;gt; initializers List&amp;lt;ApplicationListener&amp;lt;?&amp;gt;&amp;gt; listeners ApplicationContextFactory applicationContextFactory ConfigurableApplicationContext run(String... args) void prepareContext() } interface ConfigurableApplicationContext { void refresh() } SpringApplication --&amp;gt; ConfigurableApplicationContext:create</description></item></channel></rss>