<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>算法 on Kevin wang's blog</title><link>https://kevinwang930.github.io/categories/%E7%AE%97%E6%B3%95/</link><description>Recent content in 算法 on Kevin wang's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sat, 02 Mar 2024 16:55:12 +0800</lastBuildDate><atom:link href="https://kevinwang930.github.io/categories/%E7%AE%97%E6%B3%95/index.xml" rel="self" type="application/rss+xml"/><item><title>Algorithms</title><link>https://kevinwang930.github.io/post/algorithm/</link><pubDate>Sat, 02 Mar 2024 16:55:12 +0800</pubDate><guid>https://kevinwang930.github.io/post/algorithm/</guid><description>1. Sort 1.1 Bubble sort a simple sorting algorithm that repeatedly steps through the input list element by element, comparing the current element with the one after it, swapping their values if needed. These passes through the list are repeated until no swaps have to be performed during a pass, meaning that the list has become fully sorted.
1.2 insertion sort participant &amp;#34;Caller&amp;#34; participant &amp;#34;InsertionSort&amp;#34; as insort Caller -&amp;gt; insort : sort(array) loop for i = 1 to length(array) - 1 insort -&amp;gt; insort : key = array[i] insort -&amp;gt; insort : j = i - 1 loop while j &amp;gt;= 0 and array[j] &amp;gt; key insort -&amp;gt; insort : array[j + 1] = array[j] insort -&amp;gt; insort : j = j - 1 end insort -&amp;gt; insort : array[j + 1] = key end Caller &amp;lt;-- insort : array sorted @enduml 1.</description></item></channel></rss>